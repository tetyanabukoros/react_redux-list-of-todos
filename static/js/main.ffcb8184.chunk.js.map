{"version":3,"sources":["features/currentTodo.ts","features/todos.ts","features/filter.ts","app/store.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodosActionType","currentTodoReducer","state","action","type","SetTodo","payload","RemoveTodo","initialState","query","status","filterReducer","actions","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","TodoList","props","dispatch","useDispatch","length","className","map","todo","id","completed","cn","title","onClick","TodoFilter","useSelector","onSubmit","event","preventDefault","name","value","onChange","target","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","useState","user","setUser","loading","setLoading","useEffect","userId","userFromServer","finally","href","email","App","isLoading","setIsLoading","t","toLowerCase","includes","todosFromServer","todosAction","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ffcb8184.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\nexport enum TodosActionType {\n  SetTodo = 'currentTodo/SET',\n  RemoveTodo = 'currentTodo/REMOVE',\n}\n\n// Action creator return type protect us from a mistype\nexport const removeTodo = (): RemoveTodoAction => ({\n  type: 'currentTodo/REMOVE',\n});\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case TodosActionType.SetTodo:\n      return action.payload;\n\n    case TodosActionType.RemoveTodo:\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = {\n  type: 'todos/SET';\n  payload: Todo[];\n};\n\nexport enum TodosActionType {\n  SetTodo = 'todos/SET',\n}\n\ntype State = Todo[];\n\ntype Action = SetTodosAction;\n\nconst setTodos = (todos: Todo[]): SetTodosAction => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\nconst initialState: State = [];\n\nexport const actions = { setTodos };\n\nconst todosReducer = (\n  state: State = initialState,\n  action: Action,\n): Todo[] => {\n  switch (action.type) {\n    case TodosActionType.SetTodo:\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","/* eslint-disable @typescript-eslint/naming-convention */\nimport { Status } from '../types/Status';\n\ninterface State {\n  query: string;\n  status: string;\n}\n\nconst initialState = {\n  query: '',\n  status: 'all',\n};\n\ntype setQueryAction = {\n  type: 'filter/set-query';\n  payload: string;\n};\n\ntype setStatusAction = {\n  type: 'filter/set-status';\n  payload: Status;\n};\ntype Actions = setQueryAction | setStatusAction;\n\n// export const actions = { setQueryAction, setStatusAction };\n\nconst filterReducer = (\n  state: State = initialState,\n  action: Actions,\n): State => {\n  switch (action.type) {\n    case 'filter/set-query':\n      return {\n        ...state,\n        query: action.payload,\n      };\n    case 'filter/set-status':\n      return {\n        ...state,\n        status: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\nimport { Todo } from '../types/Todo';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\nconst todosSelector = (state: RootState): Todo[] => state.todos;\n\nconst todosBySearchQuery = (query: string) => (state: RootState) => {\n  return state.todos.filter((t: Todo) => t.title.toLowerCase()\n    .includes(query.toLowerCase()));\n};\n\nexport const TODOS_SELECTOR = {\n  todos: todosSelector,\n  todosBySearchQuery,\n};\n","import React from 'react';\nimport cn from 'classnames';\nimport { useDispatch } from 'react-redux';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todos: Todo[];\n  currentTodo: Todo | null;\n}\n\nexport const TodoList: React.FC<Props> = (props) => {\n  const { todos, currentTodo } = props;\n\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      {todos.length === 0 && (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      )}\n\n      <table className=\"table is-narrow is-fullwidth\">\n        <thead>\n          <tr>\n            <th>#</th>\n\n            <th>\n              <span className=\"icon\">\n                <i className=\"fas fa-check\" />\n              </span>\n            </th>\n\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {todos.map(todo => (\n            <tr data-cy=\"todo\" key={todo.id}>\n              <td className=\"is-vcentered\">{todo.id}</td>\n              <td className=\"is-vcentered\">\n                {todo.completed && (\n                  <span\n                    className=\"icon\"\n                    data-cy=\"iconCompleted\"\n                  >\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n\n              <td className=\"is-vcentered is-expanded\">\n\n                <p className={cn(\n                  {\n                    'has-text-danger': !todo.completed,\n                    'has-text-success': todo.completed,\n                  },\n                )}\n                >\n                  {todo.title}\n\n                </p>\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => dispatch({\n                    type: 'currentTodo/SET', payload: todo,\n                  })}\n                >\n                  <span className=\"icon\">\n                    <i className={cn(\n                      'far',\n                      {\n                        'fa-eye': todo.id !== currentTodo?.id,\n                        'fa-eye-slash': todo.id === currentTodo?.id,\n                      },\n                    )}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          ))}\n\n        </tbody>\n      </table>\n    </>\n  );\n};\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../../app/store';\n\nexport const TodoFilter:React.FC = () => {\n  const query = useSelector((state: RootState) => state.filter.query);\n  const status = useSelector((state: RootState) => state.filter.status);\n  const dispatch = useDispatch();\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            name=\"filterGoods\"\n            value={status}\n            data-cy=\"statusSelect\"\n            onChange={(event) => dispatch({\n              type: 'filter/set-status', payload: event.target.value,\n            })}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => dispatch({\n            type: 'filter/set-query', payload: event.target.value,\n          })}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {query !== '' && (\n            // eslint-disable-next-line jsx-a11y/control-has-associated-label\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => dispatch({\n                type: 'filter/set-query', payload: '',\n              })}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getUser } from '../../api';\nimport { RootState } from '../../app/store';\nimport { removeTodo } from '../../features/currentTodo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\nexport const TodoModal: React.FC = () => {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(false);\n\n  const currentTodo = useSelector((state: RootState) => state.currentTodo);\n\n  useEffect(() => {\n    setLoading(true);\n\n    if (currentTodo) {\n      getUser(currentTodo.userId)\n        .then((userFromServer) => setUser(userFromServer))\n\n        .finally(() => setLoading(false));\n    }\n  }, [currentTodo]);\n\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {loading\n        ? (\n          <Loader />\n        )\n        : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                Todo #\n                {currentTodo?.id}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={() => dispatch(removeTodo())}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {currentTodo?.title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                {!currentTodo?.completed && (\n                  <strong className=\"has-text-danger\">Planned</strong>\n                )}\n\n                {currentTodo?.completed && (\n                  <strong className=\"has-text-success\">Done</strong>\n                )}\n                {' by '}\n\n                <a href={`mailto:${user?.email}`}>\n                  {user?.name}\n                </a>\n              </p>\n            </div>\n          </div>\n        )}\n\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { actions as todosAction } from './features/todos';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { RootState } from './app/store';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nexport const App: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(false);\n\n  const dispatch = useDispatch();\n  const todos: Todo[] = useSelector((state: RootState) => {\n    if (state.filter.status === 'active') {\n      return state.todos.filter((t: Todo) => (t.title.toLowerCase()\n        .includes(state.filter.query.toLowerCase())) && t.completed === false);\n    }\n\n    if (state.filter.status === 'completed') {\n      return state.todos.filter((t: Todo) => (t.title.toLowerCase()\n        .includes(state.filter.query.toLowerCase())) && t.completed === true);\n    }\n\n    return state.todos.filter((t: Todo) => t.title.toLowerCase()\n      .includes(state.filter.query.toLowerCase()));\n  });\n\n  const currentTodo = useSelector((state: RootState) => state.currentTodo);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getTodos()\n      .then(todosFromServer => dispatch(todosAction.setTodos(todosFromServer)))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading ? <Loader />\n                : (\n                  <TodoList\n                    todos={todos}\n                    currentTodo={currentTodo}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && (\n        <TodoModal />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}